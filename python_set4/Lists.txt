#List

Lists are used to store multiple items in a single variable.

Lists are one of 4 built-in data types in Python used to store collections of data

the other 3 are Tuple, Set, and Dictionary,

Example 1: [Syntax]

mylist = ["apple", "banana", "cherry"]

thislist = ["apple", "banana", "cherry"]
print(thislist)

#List Items

List items are ordered, changeable, and allow duplicate values.

List items are indexed, 

the first item has index [0], the second item has index [1] etc.

Ordered

 lists are ordered, it means that the items have a defined order, and that order will not change.

If you add new items to a list, the new items will be placed at the end of the list.


# List Methods
Python has a set of built-in methods that you can use on lists.

Method		Description

append()		Adds an element at the end of the list

clear()		Removes all the elements from the list

copy()		Returns a copy of the list

count()		Returns the number of elements with the specified value

extend()		Add the elements of a list (or any iterable), to the end of the current list

index()		Returns the index of the first element with the specified value

insert()		Adds an element at the specified position

pop()		Removes the element at the specified position

remove()		Removes the item with the specified value

reverse()		Reverses the order of the list

sort()		Sorts the list


# Lists Allow Duplicates

Since lists are indexed, lists can have items with the same value:

Example
Lists allow duplicate values:

thislist = ["apple", "banana", "cherry", "apple", "cherry"]
print(thislist)


# List Items - Data Types
List items can be of any data type:

Example
String, int and boolean data types:

list1 = ["apple", "banana", "cherry"]
list2 = [1, 5, 7, 9, 3]
list3 = [True, False, False]

Example
A list with strings, integers and boolean values:

list1 = ["abc", 34, True, 40, "male"]

#type()
From Python's perspective, lists are defined as objects with the data type 'list':

<class 'list'>
Example
What is the data type of a list?

mylist = ["apple", "banana", "cherry"]
print(type(mylist))

#The list() Constructor
It is also possible to use the list() constructor when creating a new list.

Example
Using the list() constructor to make a List:

thislist = list(("apple", "banana", "cherry")) # note the double round-brackets
print(thislist)


#Python Collections (Arrays)

There are four collection data types in the Python programming language:

1. List is a collection which is ordered and changeable. Allows duplicate members.
2. Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
3. Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.
4. Dictionary is a collection which is ordered** and changeable. No duplicate members.

# List Programs

# declaring list with integer elements
list1 = [10, 20, 30, 40, 50]

# printing list1
print "List element are: ", list1


# printing elements of list1 by index
print "Element @ 0 index:", list1[0]
print "Element @ 1 index:", list1[1]
print "Element @ 2 index:", list1[2]
print "Element @ 3 index:", list1[3]
print "Element @ 4 index:", list1[4]


# declaring list with string elements [ progeam 1]
list2 = ["New Delhi", "Mumbai", "Chennai", "calcutta"]

# printing list2
print "List elements are: ", list2

#printing elements of list2 by index
print "Element @ 0 index:",list2 [0]
print "Element @ 1 index:",list2 [1]
print "Element @ 2 index:",list2 [2]
print "Element @ 3 index:",list2 [3]
print " " # prints new line

# declaring list with mixed elements
list3 = ["Amit Shukla", 21, "New Delhi", 9876543210]

#printing list3
print "List elements are: ", list3

# printing elements of list3 by index
print "Element @ 0 index (Name) :", list3[0]
print "Element @ 1 index (Age ) :", list3[1]
print "Element @ 2 index (City) :", list3[2]
print "Element @ 3 index (Mob.) :", list3[3]
print "" # prints new line


#Syntax to print list in different ways:

    print (list)          		# printing complete list
    print (list[i])       		# printing ith element of list
    print (list[i], list[j])	# printing ith and jth elements
    print (list[i:j])     		# printing elements from ith index to jth index
    print (list[i:])      		# printing all elements from ith index
    print (list * 2)  		# printing list two times
    print (list1 + list2) 	# printing concatenated list1 & list2

#program 2

# python program to demonstrate example of lists

# declaring & initializing two list
list1 = ["Amit", "Abhi", "Radib", 21, 22, 37]
list2 = [100, 200, "Hello", "World"]

print (list1)          		# printing complete list1
print (list1[0])       		# printing 0th (first) element of list1
print (list1[0], list1[1])	# printing first & second elements
print (list1[2:5])     		# printing elements from 2nd to 5th index
print (list1[1:])      		# printing all elements from 1st index
print (list2 * 2)  		# printing list2 two times
print (list1 + list2) 		# printing concatenated list1 & list2

#program 3

#Program for Adding, removing elements in the list
Python List append() Method
It is used to add/append an object (which will be passed in method as parameter) to the list.

#Syntax:

 list.append(element)


list - is the name of the list.
append() - is the method name, that is used to add element/object to the list.
element - is an element (which is considered as on object or element) to be added in the list.

Python List pop() Method
It is used to remove/pop an object from the list.

Syntax:

 list.pop()
Here,

list is the name of the list.
pop() is the method name that is used to remove last element from the list.

# Declaring a list with integer and string elements
list = [10, 20, 30, "New Delhi", "Mumbai"]

# printing list
print "List elements are: ", list

# adding elements 
list.append (40)
list.append (50)
list.append ("Chennai")

# printing list after adding elements
print "List elements: ", list

# removing elements
list.pop () ;
# printing list
print "List elements: ", list
# removing elements
list.pop () ;
# printing list
print "List elements: ", list

#Program to print a list using 'FOR and IN' loop

FOR and IN constructs as loop is very useful in the Python, it can be used to access/traverse each element of a list.

Syntax of for ... in loop

    for variable in list_name:
        Statements

#program 4

# Declaring a list
list = [10, 20, 30, 40, 50]

# printing without using FOR and IN
print "List elements are: ", list
print " " # prints new line

# printing using FOR and IN
print "List elements are: "

for L in list:
	print L 

print " " # prints new line

# calculating Sum of all elements
sum = 0 
for L in list:
	sum += L 
print "Sum is: ", sum

#Program to add an element at specified index in a list

Syntax:

 list.insert(index, element)
Here,

list is the name of the list, in which we have to insert element at given index.
index is the position, where we want to insert an element.
element is an element/item to be inserted in the list.
Example:

    list.insert(2, 100)
    It will insert 100 at 2nd position in the list name ‘list’.

#program 5

# Declaring a list
list = [10, 20, 30]

# printing elements
print (list)
# O/P will be: [10, 20, 30]

# inserting "ABC" at 1st index
list.insert (1, "ABC")
# printing
print (list)
# O/P will be: [10, 'ABC', 20, 30]

# inserting "PQR" at 3rd index
list.insert (3, "PQR")
# printing
print (list)
# O/P will be: [10, 'ABC', 20, 'PQR', 30]

# inserting 'XYZ' at 5th index
list.insert (5, "XYZ")
print (list)
# O/P will be: [10, 'ABC', 20, 'PQR', 30, 'XYZ']

# inserting 99 at second last index 
list.insert (len (list) -1, 99)
# printing
print (list)
# O/P will be: [10, 'ABC', 20, 'PQR', 30, 99, 'XYZ']

#Python program to remove first occurrence of a given element in the list:

list.remove()
This method removes first occurrence given element from the list.

Syntax:

 list.remove(element)
Here,

list is the name of the list, from where we have to remove the element.
element an element/object to be removed from the list.

#program 6

# Declaring a list
list = [10, 20, 30, 40, 30]

# print list 
print "List element:"
for l in range(len(list)):
	print (list[l])

# removing 30 from the list 
list.remove(30);

# print list after removing 30
print "List element after removing 30:"
for l in range(len(list)):
	print (list[l])

#Remove all occurrences a given element from the list

Example:

    Input:
    list = [10, 20, 10, 30, 10, 40, 10, 50]
    n = 10

    Output:
    list after removing 10 from the list
    list = [20, 30, 40, 50]

Logic:

1. Run a while loop from 0th element to last element's index.
2. Check the element whether it is equal to the number (which is to be removed) or not.
3. If any element of the list is equal to the number (which is to be removed), remove that element from the list.
4. To remove the number from the list, use list.remove() method.
5. After removing the number/element from the list, decrease the length, because one item is deleted, 
and then continue the loop to check the next item at same index (because after removing the element – next elements shifts to the previous index.
6. If element is not found (i.e. is not removed), then increase the loop counter to check next element.

#program 7

# list with integer elements
list = [10, 20, 10, 30, 10, 40, 10, 50]
# number (n) to be removed
n = 10

# print original list 
print ("Original list:")
print (list)

# loop to traverse each element in list
# and, remove elements 
# which are equals to n
i=0 #loop counter
length = len(list)  #list length 
while(i<length):
	if(list[i]==n):
		list.remove (list[i])
		# as an element is removed	
		# so decrease the length by 1	
		length = length -1  
		# run loop again to check element							
		# at same index, when item removed 
		# next item will shift to the left 
		continue
	i = i+1

# print list after removing given element
print ("list after removing elements:")
print (list)


#Program to remove all elements in a range from the List
del() method is used to remove all elements of list in range starting from start_index to end_index.

Syntax:

 del list(start_index, end_index)

#program 8

# Declaring a list
list = [10, 20, 30, 40, 50]

# print list
print "List element:"
for l in range(len(list)):
	print (list[l])

# delete element from index 1 to 30del list[1.3]
del list[1:3]

# print list after deleting
# element from index 1 to 3
print "List element after del[1:3]:"
for l in range(len(list)):
	print (list[l])

#Program to sort the elements of given list in Ascending and Descending Order

#program 9

# List of integers
num = [10, 30, 40, 20, 50]

# sorting and printing 
num.sort()
print (num)

# List of float numbers
fnum = [10.23, 10.12, 20.45, 11.00, 0.1]

# sorting and printing
fnum.sort()
print (fnum)

# List of strings 
str = ["Banana", "Cat", "Apple", "Dog", "Fish"]

# sorting and  printing
str.sort()
print (str)

#Sorting in Descending Order (list.sort(reverse=True))

To sort a list in descending order, we pass reverse=True as an argument with sort() method.

Syntax:

 list.sort(reverse=True)

#program 10

# List of integers
num = [10, 30, 40, 20, 50]

# sorting and printing 
num.sort(reverse=True)
print (num)

# List of float numbers
fnum = [10.23, 10.12, 20.45, 11.00, 0.1]

# sorting and printing
fnum.sort(reverse=True)
print (fnum)

# List of strings 
str = ["Banana", "Cat", "Apple", "Dog", "Fish"]

# sorting and  printing
str.sort(reverse=True)
print (str)


#Program to find the differences of two lists

Logic:

To find the differences of the lists, we are using set() Method, 
 we have to explicitly convert lists into sets and then subtract the set converted lists, 
the result will be the elements which are not exist in the second.

#program 11

# list1 - first list of the integers
# lists2 - second list of the integers
list1 = [10, 20, 30, 40, 50]
list2 = [10, 20, 30, 60, 70]

# printing lists 
print "list1:", list1
print "list2:", list2

# finding and printing differences of the lists
print "Difference elements:"
print (list (set(list1) - set (list2)))


#Program 12: with mixed type of elements, printing 1) the elements which are not exist in list2 and 
					      2) the elements which are not exists in list1.

# list1 - first list with mixed type elements
# lists2 - second list with mixed type elements
list1 = ["Amit", "Shukla", 21, "New Delhi"]
list2 = ["Aman", "Shukla", 21, "Mumbai"]

# printing lists 
print "list1:", list1
print "list2:", list2

# finding and printing differences of the lists
print "Elements not exists in list2:"
print (list (set(list1) - set (list2)))

print "Elements not exists in list1:"
print (list (set(list2) - set (list1)))

#program 13
#Given a list and we have to find the index of first matched of a list in Python.

list.index() Method
It’s an inbuilt method in Python, it returns the index of first matched element of a list.

Syntax:

 list.index(element)

# declare a list of Integers
list = [10, 20, 10, 20, 30, 40, 50]

# printing index of 10 
print (list.index (10))

#printing index of 20
print (list.index (20))

# printing index of 30
print (list.index (30))

# printing index of 40
print (list.index (40))

# printing index of 50
print (list.index (50))

#program 14
#Program to find the position of min and max elements of a list in Python

# declare a list of Integers
list = [10, 1, 2, 20, 3, 20]

# min element's position/index
min = list.index (min(list))
# max element's position/index
max = list.index (max(list))

# printing the position/index of min and max elements
print "position of minimum element: ", min
print "position of maximum element: ", max

#program 15
#Read the value of N (limit of the list), input N elements and print the elements in Python.

# declare a list
list = []

# read limit (value of n)
# for maximum number of elements
n = int (input ("Enter limit of the list: "))

# input n integer element 
# and append to the list 
for i in range (n) :
	item = int (input ("Enter an integer: "))
	list.append (item)

# print all elements
print "Input list elements are: "
for i in range (n) :
	print list [i]

#To remove duplicate elements, append the unique elements to another list.
#program 16

# declare list 
list1 = [10, 20, 10, 20, 30, 40, 30, 50]

# creating another list with unique elements
# declare another list 
list2 = []

# appending elements 
for n in list1:
	if n not in list2:
		list2.append(n)

# printing the lists 
print "Original list"
print "list1: ", list1
print "List after removing duplicate elements"
print "list2: ", list2

#program 17

# Function to remove duplicates 
def removeDuplicates (list1):
	# declare another list
	list2 = []

	# appending elements 
	for n in list1:
		if n not in list2:
			list2.append (n)
	return list2

# Main code
# declare a list
list1 = [10, 20, 10, 20, 30, 40, 30, 50]
# print the list 
print "Original list: ", list1
print "List after duplicate remove: ", removeDuplicates (list1)

#Program to Create two lists with EVEN numbers and ODD numbers from a list
Example:

    Input:
    List1 = [11, 22, 33, 44, 55]

    Output:
    List with EVEN numbers: [22, 44]
    List with ODD NUMBERS: [11, 33, 55]

#program 18
# declare and assign list1
list1 = [11, 22, 33, 44, 55]

# declare listOdd - to store odd numbers
# declare listEven - to store even numbers
listOdd = []
listEven = []

# check and append odd numbers in listOdd
# and even numbers in listEven
for num in list1:
	if num%2 == 0:
		listEven.append(num)
	else:
		listOdd.append(num) 

# print lists
print "list1:    ", list1 
print "listEven: ", listEven
print "listOdd:  ", listOdd


#Given a list of the integers and M, N and we have to print the numbers which are divisible by M, N in Python.

Example:

    Input:
    List = [10, 15, 20, 25, 30]
    M = 3, N=5

    Output:
    15
    30

#program 19

# declare a list of integers
list = [10, 15, 20, 25, 30]

# declare and assign M and N 
M = 3
N = 5 

# print the list
print "List is: ", list

# Traverse each element and check 
# whether it is divisible by M, N 
# or not, if condition is true print 
# the element
print "Numbers divisible by {0} and {1}".format (M, N)
for num in list:
	if( num%M==0 and num%N==0 ) :
		print num

#Create three lists of numbers, their squares and cubes
#program 20

Example:

    Input:
    Start = 1 
    End = 10

    Output:
    numbers: [1, 2, 3, 4, 5, 6, 7, 8,  9, 10]
    squares: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
    cubes  : [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]

Logic:

Declare three lists.
Define range, here we are defining start with 1 and end with 10.
Run a loop with the range as range(start, end+1) and loop counter as count.
Append the loop counter count to the list named numbers, append square to the list named squares and append the cube to the list named cubes.
Finally, print the lists.

# declare lists
numbers = []
squares = []
cubes = []

# start and end numbers
start = 1 
end = 10 

# run a loop from start to end+1 
for count in range (start, end+1) :
    numbers.append (count)
    squares.append (count**2)
    cubes.append (count**3)

# print the lists
print "numbers: ",numbers
print "squares: ",squares
print "cubes  : ",cubes


#program 21

# define function to add numbers in list
def listNumbers(a,b):
	#define dynamic list
	list = []
	for count in range(a,b+1):
		list.append(count)	
	#return list
	return list
	
# define function to add squares in list
def listSquares(a,b):
	#define dynamic list
	list = []
	for count in range(a,b+1):
		list.append(count**2)	
	#return list
	return list

# define function to add cubes in list
def listCubes(a,b):
	#define dynamic list
	list = []
	for count in range(a,b+1):
		list.append(count**3)	
	#return list
	return list
	

# Main code	
# declare lists
numbers = []
squares = []
cubes = []

# start and end numbers
start = 1 
end = 10 

# get values in lists
numbers = listNumbers(start, end)
squares = listSquares(start, end)
cubes   = listCubes(start, end)

# print the lists
print "numbers: ",numbers
print "squares: ",squares
print "cubes  : ",cubes

#Given a list, and we have to create two lists from first half elements and second half elements of a list in Python.

Example:

    Input:
    list:  [10, 20, 30, 40, 50, 60]

    Output:
    list1: [10, 20, 30]
    list2: [40, 50, 60]

#program 22

# define a list 
list = [10, 20, 30, 40, 50, 60]

# Create list1 with half elements (first 3 elements)
list1 = list [:3]
# Create list2 with next half elements (next 3 elements)
list2 = list [3:]

# print list (s)
print "list : ",list
print "list1: ",list1
print "list2: ",list2

#program 23

# define a list 
list = [10, 20, 30, 40, 50, 60]

# Create list1 with half elements (first 3 elements)
list1 = list [0:3]
# Create list2 with next half elements (next 3 elements)
list2 = list [3:6]

# print list (s)
print "list : ",list
print "list1: ",list1
print "list2: ",list2

#Given a list and we have to iterate it in reverse order in python.

Example:

    Input:
    List = [10, 20, 30, 40, 50]
    Output:
    list = [50, 40, 30, 20, 10]


    Input;
    list = ['Hello', 10 'World', 20]
    Output:
    list = [20, 'World', 10, 'Hello']

Iterate a list in reverse order
To iterate a list in reverse order, list[::-1] is used. list[::-1] will return the list in reverse order.

#program 24

# define a list
list1  = [10, 20, 30, 40, 50]

# print the list 
print "original list: ", list1

# iterate the list
list1 = list1[::-1]

# print the list 
print "list in reverse order: ", list1

# another list with string and integer elements
list2 = ['Hello', 10, 'world', 20]

# print the list
print "Original list: ", list2

# iterate the list
list2 = list2[::-1]

# print the list
print "list in reverse order: ", list2

#Given a list, and we have to print the list after removing the EVEN numbers in Python.

Example:

    Input:
    list = [11, 22, 33, 44, 55]

    Output:
    list after removing EVEN numbers
    list = [11, 33, 55]

#program 25

# list with EVEN and ODD number
list = [11, 22, 33, 44, 55]

# print original list
print "Original list:"
print list

# loop to traverse each element in the list
# and, remove elements
# which are EVEN (divisible by 2)
for i  in list:
	if(i%2 == 0):
	    list.remove(i)

# print list after removing EVEN elements
print "list after removing EVEN numbers:"
print list

#Input comma separated elements (integers), and converts it into list in Python.

Example:

    Input:
    Enter comma separated integers: 10,20,30,40,50

    Output:
    list:  ['10', '20', '30', '40', '50']
    List (after converted each element to int)
    list (li) :  [10, 20, 30, 40, 50]

Logic:

Input a comma - separated string using raw_input() method.
Split the elements delimited by comma (,) and assign it to the list, to split string, use string.split() method.
The converted list will contains string elements.
Convert elements to exact integers:
Traverse each number in the list by using for...in loop.
Convert number (which is in string format) to the integer by using int() method.
Print the list.

#program 26

# input comma separated elements as string 
str = str (raw_input ("Enter comma separated integers: "))
print "Input string: ", str

# conver to the list
list = str.split (",")
print "list: ", list

# convert each element as integers
li = []
for i in list:
	li.append(int(i))

# print list as integers
print "list (li) : ", li

#Python program to convert a string to integers list
#program 27

# program to convert string to integer list
# language: python3

# declare a list
str1 = "12345"

# list variable to integeres
int_list =[]

# converting characters to integers
for ch in str1:
    int_list.append(int(ch))

# printing the str_list and int_list    
print ("str1: ", str1)
print ("int_list: ", int_list)

#program 28
ValueError
#If there is any character except the digits, there will be an error "ValueError: invalid literal for int() with base 10".

# program to convert string to integer list
# language: python3

# declare a list
str1 = "12345ABCD"

# list variable to integeres
int_list =[]

# converting characters to integers
for ch in str1:
    int_list.append(int(ch))

# printing the str_list and int_list    
print ("str1: ", str1)
print ("int_list: ", int_list)

#program 29
#  use list as stack 

# Declare a list named as "stack"
stack = [10, 20, 30]
print ("stack elements: ");
print (stack)

# push operation 
stack.append(40)
stack.append(50)
print ("Stack elements after push opration...");
print (stack)

# push operation 
print (stack.pop (), " is removed/popped...")
print (stack.pop (), " is removed/popped...")
print (stack.pop (), " is removed/popped...")
print ("Stack elements after pop operation...");
print (stack)

#program 30
#Extend a list using + Operator

# declaring a list with some of the elements
list1 = [10, 20, 30, 40, 50]
# printing the list
print(list1)

# inserting the elements in list
list1 += [60]
list1 += [70, 80]

# print the updated list
print(list1)

#Python program for various list operations
#program 31

following operations are being performed in the list,

Declaring an integer list
Printing the complete list
Printing the first element of the list
Printing ith element of the list
Printing elements within the given indexes
Printing a specific element using negative indexing
Appending an element to the list
Finding the index of a specific element in the list
Sorting the list elements
Popping an element from the list
Removing specified element from the list
Inserting an element at specified index
Extending the list i.e. insert set of element (list) in the list
Reversing list elements

# Python code for various list operation

# declaring a list of integers
iList = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]

# List slicing operations
# printing the complete list
print('iList: ',iList)
# printing first element 
print('first element: ',iList[0]) 
# printing fourth element 
print('fourth element: ',iList[3]) 
# printing list elements from 0th index to 4th index
print('iList elements from 0 to 4 index:',iList[0: 5]) 
# printing list -7th or 3rd element from the list
print('3rd or -7th element:',iList[-7]) 


# appending an element to the list
iList.append(111)
print('iList after append():',iList)

# finding index of a specified element 
print('index of \'80\': ',iList.index(80))

# sorting the elements of iLIst
iList.sort()
print('after sorting: ', iList);

# popping an element
print('Popped elements is: ',iList.pop())
print('after pop(): ', iList);

# removing specified element
iList.remove(80)
print('after removing \'80\': ',iList)

# inserting an element at specified index 
# inserting 100 at 2nd index 
iList.insert(2, 100)
print('after insert: ', iList)

# counting occurances of a specified element
print('number of occurences of \'100\': ', iList.count(100))

# extending elements i.e. inserting a list to the list
iList.extend([11, 22, 33])
print('after extending:', iList)

#reversing the list
iList.reverse()
print('after reversing:', iList)

#program 32
#Check all elements of a list are the same or not in Python

use [1:] and [:-1] to compare all the elements in the given list

# function to check elements
def check_equal(a):
  return a[1:] == a[:-1]

# lists
x = [10, 20, 30, 40,50]
y = [10, 20, 20, 20, 20]
z = [10, 10, 10, 10, 10]

# check how [1:] and [:-1] wors?
print("x: ", x)
print("x[1:]: ", x[1:])
print("x[:-1]: ", x[:-1])
print("check_equal(x): ",check_equal(x))
print()

print("y: ", y)
print("y[1:]: ", y[1:])
print("y[:-1]: ", y[:-1])
print("check_equal(y): ",check_equal(y))
print()

print("z: ", z)
print("z[1:]: ", z[1:])
print("z[:-1]: ", z[:-1])
print("check_equal(z): ",check_equal(z))
print()

#Program to print positive numbers in a list
#program 33

# Python program to find positive numbers from a list

# Getting list from user
myList = []
length = int(input("Enter number of elements : "))
for i in range(0, length):
    value = int(input())
    myList.append(value)

# printing all positive values of the list 
print("All positive numbers of the list : ")
for ele in myList:
	if ele >= 0:
	    print(ele, end = " ")

#program 34
#Program to extract keyword from the list

# Python Program to extract keywords from the list...

# Import iskeyword method
from keyword import iskeyword 

# Initializing list of sentences...
listOfSentence = ["include help is", "great platform for programmers"]

# Printing original list
print("List of sentences = ", end = " ")
print(listOfSentence)

keywordList = [] 
# Iterating using loop and checking for Keywords...
for sentence in listOfSentence:
    for words in sentence.split():
    	if iskeyword(words):
		    keywordList.append(words)

# Print keyword list...
print("Keywords present in List : ", end = " " )
print(keywordList)

#program 35
# Python program to remove empty list # from a list of lists

# Initializing list of lists
listofList = [[5], [54, 545,9], [], [1, 4, 7], [], [8, 2, 5] ]

# Printing original list
print("List of List = ", end = " ")
print(listofList)

nonEmptyList = [] 

# Iterating using loop and eliminating empty list
nonEmptyList = [listEle for listEle in listofList if listEle != []]

# Printing list without empty list
print("List without empty list: ", end = " " )
print(nonEmptyList)


#program 36
#Program to remove the empty list from a list of lists using filter() method

# Python Program to remove empty list from a list of lists

# Initializing list of lists
listofList = [[5], [54, 545,9], [], [1, 4, 7], [], [8, 2, 5] ]

# Printing original list
print("List of List = ", end = " ")
print(listofList)

nonEmptyList = [] 
# eliminating empty lists using the filter method...
nonEmptyList = list(filter(None, listofList))

# Printing list without empty list
print("List without empty list: ", end = " " )
print(nonEmptyList)











